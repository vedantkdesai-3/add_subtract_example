package com.vmware.vmwareassigment;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.vmware.vmwareassigment.controller.AddSubtractController;
import com.vmware.vmwareassigment.ro.Input;
import com.vmware.vmwareassigment.ro.ResultRO;

@SpringBootTest
@MockBean(AddSubtractController.class)
class VmwareAssigmentApplicationTests {

	@InjectMocks
	private AddSubtractController controller;

	@Test
	public void add() throws Exception {
		ResultRO resultRO = controller.add(new Input(Double.valueOf(100), Double.valueOf(50)));
		assert (resultRO.getResult().equals(Double.valueOf(150)));
	}

	@Test
	public void sub() throws Exception {
		ResultRO resultRO = controller.sub(new Input(Double.valueOf(100), Double.valueOf(50)));
		assert (resultRO.getResult().equals(Double.valueOf(50)));
	}

	@Test
	public void addInvalidData() throws Exception {
		ResultRO resultRO = controller.add(new Input(Double.valueOf(
				"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"),
				Double.valueOf(
						"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")));
		assert (resultRO.getResult().isInfinite());
	}

	@Test
	public void subLargeData() throws Exception {
		ResultRO resultRO = controller.sub(new Input(Double.valueOf(
				"-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"),
				Double.valueOf(
						"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")));
		assert (resultRO.getResult().isInfinite());
	}
}
